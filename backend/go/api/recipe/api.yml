openapi: '3.0.2'
info:
  title: Recipe API
  version: 1.0.0
servers:
  - description: develop
    url: https://apigateway-service-ckndvuglva-et.a.run.app
  - description: local
    url: http://localhost:8080
paths:
  
  /recipe/v1/recipe:
     post:
      summary: Create Recipe
      description: Create Recipe
      tags: ["SALES ADMIN"]
      requestBody:
        $ref: '#/components/requestBodies/Save'
      responses:
        '200':
          $ref: '#/components/responses/Recipe'  
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
     get:
      summary: Find Recipe List
      description: Find Recipe List, and Sort By New
      tags: ["SALES ADMIN","CUSTOMER"]
      parameters:
        - name: num
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: search
          in: query
          required: false
          schema:
            type: string
        - name: category
          description: get by category
          in: query
          required: false
          schema:
            type: string
        - name: categories
          description: get list category
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          $ref: '#/components/responses/Page'  
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /recipe/v1/recipe/{id}:
    get:
      summary: Get Recipe By Id
      description: Get Recipe By Id
      tags: ["SALES ADMIN","CUSTOMER"]
      parameters:
        - $ref: '#components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Recipe'  
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update Recipe By Id
      description: Update Recipe By Id
      tags: ["SALES ADMIN"]
      parameters:
        - $ref: '#components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/Save'
      responses:
        '200':
          $ref: '#/components/responses/Recipe'  
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete Recipe By Id
      description: Delete Recipe By Id
      tags: ["SALES ADMIN"]
      parameters:
        - $ref: '#components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Recipe'  
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

components:
  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
  schemas:
    Recipe:
      type: object
      properties:
        id:
          type: string
          example: ID-001
        category:
          type: string
          example: Desert
        title:
          type: string
          example: Cheese Cake
        imageUrl:
          type: string
          format: url
          example: https://storage.googleapis.com/dairy-food-development.appspot.com/default/user.png
        description:
          type: string
          example: siapkan bahan dan alat,camprkan semua bahan,dan gunakan alat untuk memasak
        createdAt:
          type: string
        updatedAt:
          type: string
    Save:
      type: object
      properties:
        category:
          type: string
          example: Desert
        title:
          type: string
          example: Cheese Cake 
        description:
          type: string
          example: siapkan bahan dan alat,camprkan semua bahan,dan gunakan alat untuk memasak
    Page:
      type: object
      properties:
        back:
          type: integer
          nullable: true
          default: null
        next:
          type: integer
          nullable: true
          default: null
        limit:
          type: integer
          default: 20
        items:
          type: array
          items:
            $ref: '#/components/schemas/Recipe'
    Categories:
      type: array
      items:
        type: string    
    
  requestBodies:
    Save:
      description: Recipe Object
      content:
        application/json:
          schema:
           $ref: '#/components/schemas/Save'

  responses:
    Recipe:
      description: "ok"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 200
              data:
                $ref: '#/components/schemas/Recipe'
              errors:
                type: string
                nullable: true
                default: null  
    Page:
      description: "ok"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 200
              data:
                oneOf:
                  - $ref: '#/components/schemas/Page'
                  - $ref: '#/components/schemas/Categories'
              errors:
                type: string
                nullable: true
                default: null  
                  
                  
    400:
      description: "Invalid input"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 400
              data:
                default: null  
              errors:
                type: string
                default: "Invalid input"
    401:
      description: "unauthorized"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 401
              data:
                default: null
              errors:
                type: string
                default: "unauthorized"  
    404:
      description: "not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 404
              data:
                default: null
              errors:
                type: string
                default: "not found"  
    500:
      description: "the system is busy, please try again later"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 500
              data:
                default: null
              errors:
                type: string
                default: "the system is busy, please try again later"  

  securitySchemes:
    local:
      type: apiKey
      in: header
      name: Auth-User
    authjwt:
      type: http
      scheme: bearer
      bearerFormat: JWT  
security:
  - local: []
  - authjwt: []