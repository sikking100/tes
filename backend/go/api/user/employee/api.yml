openapi: 3.0.3
info:
  title: Employee Api
  version: 1.0.0
servers:
  - description: develop
    url: https://apigateway-service-ckndvuglva-et.a.run.app
  - description: local
    url: http://localhost:8080
paths:
  /user-employee/v1:
    get:
      summary: "[employee]"
      description: "find user employee"
      parameters: 
      - name: num
        in: query
        required: true
        schema:
          type: integer 
          minimum: 1
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          minimum: 1
          maximum: 100
      - name: query
        in: query
        required: false
        schema:
          type: string
      - name: search
        in: query
        required: false
        schema:
          type: string
      responses:
        200:
          $ref: '#/components/responses/Page'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  /user-employee/v1/approver/credit:
    get:
      summary: "[sales admin]"
      description: "find approver credit"
      parameters:
      - name: regionId
        in: query
        required: true
        schema:
          type: string 
      - name: branchId
        in: query
        required: true
        schema:
          type: string 
      - name: team
        in: query
        required: true
        description: "1.FOOD</br>2.RETAIL"
        schema:
          type: integer 
      responses:
        200:
          $ref: '#/components/responses/ListUserApprover'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'  
        500:
          $ref: '#/components/responses/500'        
  /user-employee/v1/approver/top:
    get:
      summary: "[all user]"
      description: "find approver top"
      parameters: 
      - name: regionId
        in: query
        required: true
        schema:
          type: string 
      - name: branchId
        in: query
        required: true
        schema:
          type: string 
      - name: team
        in: query
        required: true
        description: "1.FOOD</br>2.RETAIL"
        schema:
          type: integer
      responses:
        200:
          $ref: '#/components/responses/ListUserApprover'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'  
        500:
          $ref: '#/components/responses/500'                
  /user-employee/v1/{id}:
    get:
      summary: "[employee]"
      description: "find employee by id"
      parameters: 
        - $ref: '#/components/parameters/id'
      responses:
        200:
          $ref: '#/components/responses/Employee'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404' 
        500:
          $ref: '#/components/responses/500'
    post: 
      summary: "[system admin, branch admin, branch warehouse admin]"
      description: "upsert employee by id"
      parameters: 
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/Save'  
      responses:
        200:
          $ref: '#/components/responses/Employee'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        409:
          $ref: '#/components/responses/409' 
        500:
          $ref: '#/components/responses/500'      
    put:
      summary: "[employee]"
      description: "update account employee by id"
      parameters: 
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/UpdateAccount'  
      responses:
        200:
          $ref: '#/components/responses/Employee'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        409:
          $ref: '#/components/responses/409'  
        500:
          $ref: '#/components/responses/500' 
    delete:
      summary: "[system admin, branch admin,branch warehouse admin]"
      description: "delete employee by id"
      parameters: 
        - $ref: '#/components/parameters/id'  
      responses:
        200:
          $ref: '#/components/responses/Employee'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404' 
        500:
          $ref: '#/components/responses/500'              
  /user-employee/v1/event/image-url:
    post:
      summary: "[event]"
      description: update activity image
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "bucket-name/activity/{id}/thumbs/{file-name.ext}/{file-id}"
                contentType:
                  type: string
                  example: "image/webp"
      responses:
        200:
          description: "ok"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    default: 200
                  data:
                     type: string 
                  errors:
                    type: string
                    nullable: true
                    default: null    
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
components:
  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: string    
  schemas:
    Location:
      type: object
      nullable: true
      properties:
        id: 
          type: string
        name:
          type: string
        type:
          type: integer
          description: "1.REGION</br>2.BRANCH"
    Employee:
      type: object
      properties:
        id:
          type: string
        phone:
          type: string
        email:
          type: string
        name:  
          type: string
        imageUrl:
          type: string
        roles:
          type: integer
          description: "1.SYSTEM ADMIN</br>2.FINANCE ADMIN</br>3.SALES ADMIN</br>4.WAREHOUSE ADMIN</br>5.BRANCH ADMIN</br>6.BRANCH FINANCE ADMIN</br>7.BRANCH SALES ADMIN</br>8.BRANCH WAREHOUSE ADMIN</br>9.DIREKTUR<br>10.GENERAL MANAGER</br>11.NASIONAL SALES MANAGER</br>12.REGIONAL MANAGER</br>13.AREA MANAGER</br>14.SALES</br>15.COURIER"
        location:
          $ref: '#/components/schemas/Location'
        team:
          type: integer
          description: "0.NO TEAM</br>1.FOOD SERVICE</br>2.RETAIL"
        fcmToken:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Page:
      type: object
      properties:
        back:
          type: integer
          nullable: true
          default: null
        next:
          type: integer
          nullable: true
          default: null
        limit:
          type: integer
          default: 20
        query:
          type: string
        search:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/Employee'      
    Save:
      type: object
      properties:
        phone:
          type: string
        email:
          type: string
        name:  
          type: string
        roles:
          type: integer
          description: "1 SYSTEM ADMIN</br>2 FINANCE ADMIN</br>3 SALES ADMIN</br>4 BRANCH ADMIN</br>5 BRANCH FINANCE ADMIN</br>6 BRANCH SALES ADMIN</br>7 WAREHOUSE ADMIN</br>8 DIREKTUR<br>9 GENERAL MANAGER</br>10 NASIONAL SALES MANAGER</br>11 REGIONAL MANAGER</br>12 AREA MANAGER</br>13 SALES</br>14 COURIER"
        location:
          $ref: '#/components/schemas/Location'
        team:
          type: integer
          description: "0 NO TEAM</br>1 FOOD SERVICE</br>2 RETAIL"
    UpdateAccount:
      type: object
      properties:
        phone:
          type: string
        email:
          type: string
        name:  
          type: string
    UserApprover:
      type: object
      properties:
        id:
          type: string
        phone:
          type: string
        email:
          type: string
        name:  
          type: string
        imageUrl:
          type: string
        roles:
          type: integer
        fcmToken:
          type: string
        note:
          type: string
        status:
          type: integer
          description: "0.PENDING</br>1.WAITING APPROVE</br>2.APPROVE</br>3.REJECT"
        updatedAt:
          type: string
          format: date-time      
    
  requestBodies:
    Save:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Save'
    UpdateAccount:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateAccount'
  responses:
    ListEmployee:
      description: "ok"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 200
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
              errors:
                type: string
                nullable: true
                default: null
    Employee:
      description: "ok"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 200
              data:
                 $ref: '#/components/schemas/Employee'
              errors:
                type: string
                nullable: true
                default: null   
    Page:
      description: "ok"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 200
              data:
                 $ref: '#/components/schemas/Page'  
              errors:
                type: string
                nullable: true
                default: null
    ListUserApprover:
      description: "ok"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 200
              data:
                type: array
                items:
                  $ref: '#/components/schemas/UserApprover'  
              errors:
                type: string
                nullable: true
                default: null            

    400:
      description: "Invalid input"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 400
              data:
                default: null  
              errors:
                type: string
                default: "Invalid input"
    401:
      description: "unauthorized"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 401
              data:
                default: null
              errors:
                type: string
                default: "unauthorized"  
    404:
      description: "not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 404
              data:
                default: null
              errors:
                type: string
                default: "not found"  
    409:
      description: "account already exists"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 409
              data:
                default: null
              errors:
                type: string
                default: "account already exists"           
    500:
      description: "the system is busy, please try again later"
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                default: 500
              data:
                default: null
              errors:
                type: string
                default: "the system is busy, please try again later"
  securitySchemes:
    local:
      type: apiKey
      in: header
      name: Auth-User
    authjwt:
      type: http
      scheme: bearer
      bearerFormat: JWT  
security:
  - local: []
  - authjwt: []